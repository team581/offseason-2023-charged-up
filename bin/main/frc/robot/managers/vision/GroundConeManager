// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.managers.vision;

import edu.wpi.first.math.kinematics.ChassisSpeeds;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj2.command.Commands;
import frc.robot.NodeHeight;
import frc.robot.managers.SuperstructureManager;
import frc.robot.swerve.SwerveSubsystem;
import frc.robot.util.scheduling.LifecycleSubsystem;
import frc.robot.util.scheduling.SubsystemPriority;
import frc.robot.vision.LimelightSubsystem;
import frc.robot.vision.VisionTarget;

public class GroundConeManager extends LifecycleSubsystem {
  /* Aggregates vision based actions into commands for the robot. */
  private final LimelightSubsystem limelight;
  private final SwerveSubsystem swerve;
  private final SuperstructureManager superstructure;

  private double yP = 0.25;


  public GroundConeManager(
      LimelightSubsystem limelight, SwerveSubsystem swerve, SuperstructureManager superstructure) {
    super(SubsystemPriority.VISION_MANAGER);

    this.limelight = limelight;
    this.swerve = swerve;
    this.superstructure = superstructure;
  }

  public Command getGroundCone() {
    // Return full command to auto score cone mid.

    // TODO(Simon): Finish command.
    // Do we drive to position, raise up, then score? Do we raise up, drive to position, then raise
    // up?
    return limelight
        .setPipelineCommand(limelight.setPipeline(0))
        .andThen(superstructure.getFloorIntakeSpinningCommand())
        .andThen(Commands.run(() -> {
          swerve.setChassisSpeeds(calculateSwerveSpeeds)
        }, swerve))
        .until(() -> intake.sensorHasCone())
        .finallyDo(
            (boolean interrupted) -> {

              // Set drive speeds to 0.
              swerve.setChassisSpeeds(new ChassisSpeeds(0, 0, 0), false);
              // Turn off LEDs.
              // limelight.turnOffLights();
            });
  }

  private CommandBase alignWithClosestConeCommand() {
    return Commands.run(
        () -> {
          // TODO(Simon): Fill in.

          // Set swerve speeds with calculateSwerveSpeeds()
        },
        limelight,
        swerve);
  }



  private ChassisSpeeds calculateSwerveSpeeds() {
    // Get closest middle cone target.
    VisionTarget closestCone = limelight.getClosestConeTarget();

    double thetaSpeed = closestCone.getThetaPercentage * yP;
    // Logger.getInstance().recordOutput("Vision/LimelightX", closestNode.x);
    // Logger.getInstance().recordOutput("Vision/LimelightY", closestNode.y);
    // Logger.getInstance().recordOutput("Vision/XSpeed",
    // swerve.getChassisSpeeds().vxMetersPerSecond);
    // Logger.getInstance().recordOutput("Vision/YSpeed",
    // swerve.getChassisSpeeds().vyMetersPerSecond);
    return new ChassisSpeeds(0.5, 0, thetaSpeed);
  }
}
